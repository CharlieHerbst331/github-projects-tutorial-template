name: Detect Project Changes

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'  # Check every 30 minutes

jobs:
  check-project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check current step
        id: check_step
        run: |
          current_step=$(grep -o "<!-- STEP: [0-9]\+ -->" README.md | sed -n 's/<!-- STEP: \([0-9]\+\) -->/\1/p' || echo "0")
          echo "CURRENT_STEP=$current_step" >> $GITHUB_ENV
          echo "Current step: $current_step"

      - name: Check Project State
        if: ${{ env.CURRENT_STEP == '1' || env.CURRENT_STEP == '2' }}
        id: project_state
        uses: actions/github-script@v6
        with:
          script: |
            const query = `
              query($owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                  projectsV2(first: 10, query: "title:\\"My Learning Project\\"") {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
            `;
            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo
            };
            
            try {
              const result = await github.graphql(query, variables);
              const projects = result.repository.projectsV2.nodes;
              
              if (projects.length === 0) {
                return;
              }
              
              if (process.env.CURRENT_STEP === '1') {
                // Project exists, trigger step 1 to 2
                await github.rest.repos.createDispatchEvent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  event_type: 'project-created'
                });
                return;
              }
              
              const projectId = projects[0].id;
              const fieldsQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            name
                            dataType
                          }
                          ... on ProjectV2SingleSelectField {
                            name
                            options {
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const fieldsResult = await github.graphql(fieldsQuery, { projectId });
              const fields = fieldsResult.node.fields.nodes;
              
              let hasPriority = false;
              let hasEffort = false;
              
              for (const field of fields) {
                if (field.name === 'Priority' && field.__typename === 'ProjectV2SingleSelectField') {
                  const options = field.options.map(opt => opt.name);
                  if (options.includes('High') && options.includes('Medium') && options.includes('Low')) {
                    hasPriority = true;
                  }
                } else if (field.name === 'Effort' && field.dataType === 'NUMBER') {
                  hasEffort = true;
                }
              }
              
              if (process.env.CURRENT_STEP === '2' && hasPriority && hasEffort) {
                // Fields added, trigger step 2 to 3
                await github.rest.repos.createDispatchEvent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  event_type: 'fields-added'
                });
              }
            } catch (error) {
              console.error('Error checking project state:', error);
            }